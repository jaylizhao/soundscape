After realizing that my original approach had overcomplicated the AppDelegate and introduced unintended issues, especially with the onboarding flow and the broken "Continue" button.  I decided to restart.
The first step was to revert the AppDelegate back to its original. I then created a new dedicated file called LanguageManager.swift inside the Language/Localization folder. The goal of this file was to encapsulate all logic related to language initialization, mismatch checking, and onboarding presentation, keeping the responsibilities separated and the code more maintainable.
In LanguageManager, I added three main responsibilities:
* initializeLanguageFlow(window:): Checks if the user has previously selected a language using FirstUseExperience. If not, it immediately presents the language onboarding screen.
* checkAndPromptForLanguageMismatch(window:): Compares the device language with the current app language. If they don’t match and the onboarding screen isn’t already being shown, it presents the language menu.
* presentLanguageScreen(window:) and languageSelected(window:): a pair of helper methods which handle launching the onboarding screen and restoring the main app interface once the user confirms their language choice.
This change allowed me to cleanly offload language setup logic from the AppDelegate by creating a central place for handling the app’s language flow. Back in the AppDelegate, I simply call LanguageManager.initializeLanguageFlow(window:) and LanguageManager.checkAndPromptForLanguageMismatch(window:), depending on the launch state.
For the "Continue" button issue, I updated OnboardingLanguageView so that the button triggers the callback provided by LanguageManager, which updates the root view controller with the main app content after the user selects a new language. This ensures that the app fully transitions into the appropriate localized experience without remaining stuck on the onboarding screen.
Thus, I was able to fix the original issue, avoid messing with onboarding transitions directly in AppDelegate, and cleaned up the overall structure.